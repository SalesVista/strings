const tap = require('tap')
const Strings = require('./lib/index')

tap.test('normalizeLocale', t => {
  t.strictEqual(Strings.normalizeLocale(), undefined)
  t.strictEqual(Strings.normalizeLocale(null), undefined)
  t.strictEqual(Strings.normalizeLocale(''), undefined)
  t.strictEqual(Strings.normalizeLocale('en-US'), 'en-US')
  t.strictEqual(Strings.normalizeLocale('en_US'), 'en-US')
  t.end()
})

tap.test('toUpper', t => {
  t.strictEqual(Strings.toUpper(), '')
  t.strictEqual(Strings.toUpper(null), '')
  t.strictEqual(Strings.toUpper(''), '')
  t.strictEqual(Strings.toUpper('abc'), 'ABC')
  t.strictEqual(Strings.toUpper('abc', 'en-US'), 'ABC')
  t.strictEqual(Strings.toUpper('abc', 'en_US'), 'ABC')
  t.strictEqual(Strings.toUpper('abc', 'invalid locale'), 'ABC')
  t.strictEqual(Strings.toUpper('лександра'), 'ЛЕКСАНДРА')
  t.strictEqual(Strings.toUpper('łukasz'), 'ŁUKASZ')
  t.end()
})

tap.test('toLower', t => {
  t.strictEqual(Strings.toLower(), '')
  t.strictEqual(Strings.toLower(null), '')
  t.strictEqual(Strings.toLower(''), '')
  t.strictEqual(Strings.toLower('ABC'), 'abc')
  t.strictEqual(Strings.toLower('ABC', 'en-US'), 'abc')
  t.strictEqual(Strings.toLower('ABC', 'en_US'), 'abc')
  t.strictEqual(Strings.toLower('ABC', 'invalid locale'), 'abc')
  t.strictEqual(Strings.toLower('ЛЕКСАНДРА'), 'лександра')
  t.strictEqual(Strings.toLower('ŁUKASZ'), 'łukasz')
  t.end()
})

tap.test('isUpper', t => {
  t.strictEqual(Strings.isUpper(), false)
  t.strictEqual(Strings.isUpper(null), false)
  t.strictEqual(Strings.isUpper(''), false)
  t.strictEqual(Strings.isUpper('a'), false)
  t.strictEqual(Strings.isUpper('A'), true)
  t.strictEqual(Strings.isUpper('a', 'en-US'), false)
  t.strictEqual(Strings.isUpper('A', 'en-US'), true)
  t.strictEqual(Strings.isUpper('a', 'en_US'), false)
  t.strictEqual(Strings.isUpper('A', 'en_US'), true)
  t.strictEqual(Strings.isUpper('a', 'invalid locale'), false)
  t.strictEqual(Strings.isUpper('A', 'invalid locale'), true)
  t.strictEqual(Strings.isUpper('л'), false)
  t.strictEqual(Strings.isUpper('ł'), false)
  t.strictEqual(Strings.isUpper('Л'), true)
  t.strictEqual(Strings.isUpper('Ł'), true)
  t.end()
})

tap.test('pluralize', t => {
  t.strictEqual(Strings.pluralize(), '')
  t.strictEqual(Strings.pluralize(null), '')
  t.strictEqual(Strings.pluralize(''), '')
  t.strictEqual(Strings.pluralize('plan'), 'plans')
  t.strictEqual(Strings.pluralize('PLAN'), 'PLANS')
  t.strictEqual(Strings.pluralize('category'), 'categories')
  t.strictEqual(Strings.pluralize('CATEGORY'), 'CATEGORIES')
  t.strictEqual(Strings.pluralize('glass'), 'glasses')
  t.strictEqual(Strings.pluralize('GLASS'), 'GLASSES')
  t.strictEqual(Strings.pluralize('box'), 'boxes')
  t.strictEqual(Strings.pluralize('BOX'), 'BOXES')
  t.strictEqual(Strings.pluralize('plan', 'en-US'), 'plans')
  t.strictEqual(Strings.pluralize('plan', 'en_US'), 'plans')
  t.strictEqual(Strings.pluralize('plan', 'invalid locale'), 'plans')
  t.strictEqual(Strings.pluralize('PLAN', 'en-US'), 'PLANS')
  t.strictEqual(Strings.pluralize('PLAN', 'en_US'), 'PLANS')
  t.strictEqual(Strings.pluralize('PLAN', 'invalid locale'), 'PLANS')
  t.end()
})

tap.test('abbreviate', t => {
  t.strictEqual(Strings.abbreviate(), '')
  t.strictEqual(Strings.abbreviate(null), '')
  t.strictEqual(Strings.abbreviate(''), '')
  t.strictEqual(Strings.abbreviate('one'), 'o')
  t.strictEqual(Strings.abbreviate('one two'), 'ot')
  t.strictEqual(Strings.abbreviate('one two three'), 'ott')
  t.strictEqual(Strings.abbreviate('One Two Three'), 'OTT')
  t.strictEqual(Strings.abbreviate('One  Two  Three'), 'OTT')
  t.end()
})

const strings = {
  [Strings.GROSS_MARGIN]: {
    singular: 'Profit',
    plural: 'Profit'
  },
  [Strings.PLAN]: 'Program',
  [Strings.QUOTA]: {
    one: 'Plan',
    other: 'Plans'
  }
}
const invalidKey = 'invalid_key'

tap.test('static get', t => {
  t.strictEqual(Strings.get(), '')
  t.strictEqual(Strings.get(null), '')
  t.strictEqual(Strings.get(''), '')

  // 1st arg string as key (only works for default values)
  t.strictEqual(Strings.get(Strings.GROSS_MARGIN), 'Gross Margin')
  t.strictEqual(Strings.get(Strings.ANNUAL_CONTRACT_VALUE), 'Annual Contract Value')
  t.strictEqual(Strings.get(invalidKey), '')

  // two interchangeable args: strings object and key string
  t.strictEqual(Strings.get(strings, Strings.GROSS_MARGIN), 'Profit')
  t.strictEqual(Strings.get(Strings.GROSS_MARGIN, strings), 'Profit')
  t.strictEqual(Strings.get(strings, Strings.ANNUAL_CONTRACT_VALUE), 'Annual Contract Value')
  t.strictEqual(Strings.get(Strings.ANNUAL_CONTRACT_VALUE, strings), 'Annual Contract Value')
  t.strictEqual(Strings.get(strings, invalidKey), '')
  t.strictEqual(Strings.get(invalidKey, strings), '')

  // 3rd arg boolean for plural
  t.strictEqual(Strings.get(strings, Strings.GROSS_MARGIN, false), 'Profit')
  t.strictEqual(Strings.get(Strings.GROSS_MARGIN, strings, false), 'Profit')
  t.strictEqual(Strings.get(strings, Strings.GROSS_MARGIN, true), 'Profit')
  t.strictEqual(Strings.get(Strings.GROSS_MARGIN, strings, true), 'Profit')
  t.strictEqual(Strings.get(strings, Strings.PLAN, false), 'Program')
  t.strictEqual(Strings.get(Strings.PLAN, strings, false), 'Program')
  t.strictEqual(Strings.get(strings, Strings.PLAN, true), 'Programs')
  t.strictEqual(Strings.get(Strings.PLAN, strings, true), 'Programs')
  t.strictEqual(Strings.get(strings, Strings.QUOTA, false), 'Plan')
  t.strictEqual(Strings.get(Strings.QUOTA, strings, false), 'Plan')
  t.strictEqual(Strings.get(strings, Strings.QUOTA, true), 'Plans')
  t.strictEqual(Strings.get(Strings.QUOTA, strings, true), 'Plans')
  t.strictEqual(Strings.get(strings, Strings.ANNUAL_CONTRACT_VALUE, false), 'Annual Contract Value')
  t.strictEqual(Strings.get(Strings.ANNUAL_CONTRACT_VALUE, strings, false), 'Annual Contract Value')
  t.strictEqual(Strings.get(strings, Strings.ANNUAL_CONTRACT_VALUE, true), 'Annual Contract Value')
  t.strictEqual(Strings.get(Strings.ANNUAL_CONTRACT_VALUE, strings, true), 'Annual Contract Value')
  t.strictEqual(Strings.get(strings, invalidKey, false), '')
  t.strictEqual(Strings.get(invalidKey, strings, false), '')
  t.strictEqual(Strings.get(strings, invalidKey, true), '')
  t.strictEqual(Strings.get(invalidKey, strings, true), '')

  // 3rd arg number as count
  t.strictEqual(Strings.get(strings, Strings.GROSS_MARGIN, 1), 'Profit')
  t.strictEqual(Strings.get(Strings.GROSS_MARGIN, strings, 1), 'Profit')
  t.strictEqual(Strings.get(strings, Strings.GROSS_MARGIN, 0), 'Profit')
  t.strictEqual(Strings.get(Strings.GROSS_MARGIN, strings, 0), 'Profit')
  t.strictEqual(Strings.get(strings, Strings.GROSS_MARGIN, 2), 'Profit')
  t.strictEqual(Strings.get(Strings.GROSS_MARGIN, strings, 2), 'Profit')
  t.strictEqual(Strings.get(strings, Strings.PLAN, 1), 'Program')
  t.strictEqual(Strings.get(Strings.PLAN, strings, 1), 'Program')
  t.strictEqual(Strings.get(strings, Strings.PLAN, 0), 'Programs')
  t.strictEqual(Strings.get(Strings.PLAN, strings, 0), 'Programs')
  t.strictEqual(Strings.get(strings, Strings.PLAN, 2), 'Programs')
  t.strictEqual(Strings.get(Strings.PLAN, strings, 2), 'Programs')
  t.strictEqual(Strings.get(strings, Strings.QUOTA, 1), 'Plan')
  t.strictEqual(Strings.get(Strings.QUOTA, strings, 1), 'Plan')
  t.strictEqual(Strings.get(strings, Strings.QUOTA, 0), 'Plans')
  t.strictEqual(Strings.get(Strings.QUOTA, strings, 0), 'Plans')
  t.strictEqual(Strings.get(strings, Strings.QUOTA, 2), 'Plans')
  t.strictEqual(Strings.get(Strings.QUOTA, strings, 2), 'Plans')
  t.strictEqual(Strings.get(strings, Strings.ANNUAL_CONTRACT_VALUE, 1), 'Annual Contract Value')
  t.strictEqual(Strings.get(Strings.ANNUAL_CONTRACT_VALUE, strings, 1), 'Annual Contract Value')
  t.strictEqual(Strings.get(strings, Strings.ANNUAL_CONTRACT_VALUE, 0), 'Annual Contract Value')
  t.strictEqual(Strings.get(Strings.ANNUAL_CONTRACT_VALUE, strings, 0), 'Annual Contract Value')
  t.strictEqual(Strings.get(strings, Strings.ANNUAL_CONTRACT_VALUE, 2), 'Annual Contract Value')
  t.strictEqual(Strings.get(Strings.ANNUAL_CONTRACT_VALUE, strings, 2), 'Annual Contract Value')
  t.strictEqual(Strings.get(strings, invalidKey, 1), '')
  t.strictEqual(Strings.get(invalidKey, strings, 1), '')
  t.strictEqual(Strings.get(strings, invalidKey, 0), '')
  t.strictEqual(Strings.get(invalidKey, strings, 0), '')
  t.strictEqual(Strings.get(strings, invalidKey, 2), '')
  t.strictEqual(Strings.get(invalidKey, strings, 2), '')

  // 3rd arg object as opts with plural boolean and lc boolean
  t.strictEqual(Strings.get(strings, Strings.GROSS_MARGIN, { plural: false, lc: true }), 'profit')
  t.strictEqual(Strings.get(Strings.GROSS_MARGIN, strings, { plural: false, lc: true }), 'profit')
  t.strictEqual(Strings.get(strings, Strings.GROSS_MARGIN, { plural: true, lc: true }), 'profit')
  t.strictEqual(Strings.get(Strings.GROSS_MARGIN, strings, { plural: true, lc: true }), 'profit')
  t.strictEqual(Strings.get(strings, Strings.PLAN, { plural: false, lc: true }), 'program')
  t.strictEqual(Strings.get(Strings.PLAN, strings, { plural: false, lc: true }), 'program')
  t.strictEqual(Strings.get(strings, Strings.PLAN, { plural: true, lc: true }), 'programs')
  t.strictEqual(Strings.get(Strings.PLAN, strings, { plural: true, lc: true }), 'programs')
  t.strictEqual(Strings.get(strings, Strings.QUOTA, { plural: false, lc: true }), 'plan')
  t.strictEqual(Strings.get(Strings.QUOTA, strings, { plural: false, lc: true }), 'plan')
  t.strictEqual(Strings.get(strings, Strings.QUOTA, { plural: true, lc: true }), 'plans')
  t.strictEqual(Strings.get(Strings.QUOTA, strings, { plural: true, lc: true }), 'plans')
  t.strictEqual(Strings.get(strings, Strings.ANNUAL_CONTRACT_VALUE, { plural: false, lc: true }), 'annual contract value')
  t.strictEqual(Strings.get(Strings.ANNUAL_CONTRACT_VALUE, strings, { plural: false, lc: true }), 'annual contract value')
  t.strictEqual(Strings.get(strings, Strings.ANNUAL_CONTRACT_VALUE, { plural: true, lc: true }), 'annual contract value')
  t.strictEqual(Strings.get(Strings.ANNUAL_CONTRACT_VALUE, strings, { plural: true, lc: true }), 'annual contract value')
  t.strictEqual(Strings.get(strings, invalidKey, { plural: false, lc: true }), '')
  t.strictEqual(Strings.get(invalidKey, strings, { plural: false, lc: true }), '')
  t.strictEqual(Strings.get(strings, invalidKey, { plural: true, lc: true }), '')
  t.strictEqual(Strings.get(invalidKey, strings, { plural: true, lc: true }), '')

  // 3rd arg opts object with count number and locale string
  t.strictEqual(Strings.get(strings, Strings.GROSS_MARGIN, { count: 1, locale: 'en-US' }), 'Profit')
  t.strictEqual(Strings.get(Strings.GROSS_MARGIN, strings, { count: 1, locale: 'en_US' }), 'Profit')
  t.strictEqual(Strings.get(strings, Strings.GROSS_MARGIN, { count: 0, locale: 'en_US' }), 'Profit')
  t.strictEqual(Strings.get(Strings.GROSS_MARGIN, strings, { count: 0, locale: 'en-US' }), 'Profit')
  t.strictEqual(Strings.get(strings, Strings.GROSS_MARGIN, { count: 2, locale: 'en_US' }), 'Profit')
  t.strictEqual(Strings.get(Strings.GROSS_MARGIN, strings, { count: 2, locale: 'en-US' }), 'Profit')
  t.strictEqual(Strings.get(strings, Strings.PLAN, { count: 1, locale: 'en-US' }), 'Program')
  t.strictEqual(Strings.get(Strings.PLAN, strings, { count: 1, locale: 'en_US' }), 'Program')
  t.strictEqual(Strings.get(strings, Strings.PLAN, { count: 0, locale: 'en_US' }), 'Programs')
  t.strictEqual(Strings.get(Strings.PLAN, strings, { count: 0, locale: 'en-US' }), 'Programs')
  t.strictEqual(Strings.get(strings, Strings.PLAN, { count: 2, locale: 'en_US' }), 'Programs')
  t.strictEqual(Strings.get(Strings.PLAN, strings, { count: 2, locale: 'en-US' }), 'Programs')
  t.strictEqual(Strings.get(strings, Strings.QUOTA, { count: 1, locale: 'en-US' }), 'Plan')
  t.strictEqual(Strings.get(Strings.QUOTA, strings, { count: 1, locale: 'en_US' }), 'Plan')
  t.strictEqual(Strings.get(strings, Strings.QUOTA, { count: 0, locale: 'en_US' }), 'Plans')
  t.strictEqual(Strings.get(Strings.QUOTA, strings, { count: 0, locale: 'en-US' }), 'Plans')
  t.strictEqual(Strings.get(strings, Strings.QUOTA, { count: 2, locale: 'en_US' }), 'Plans')
  t.strictEqual(Strings.get(Strings.QUOTA, strings, { count: 2, locale: 'en-US' }), 'Plans')
  t.strictEqual(Strings.get(strings, Strings.ANNUAL_CONTRACT_VALUE, { count: 1, locale: 'en-US' }), 'Annual Contract Value')
  t.strictEqual(Strings.get(Strings.ANNUAL_CONTRACT_VALUE, strings, { count: 1, locale: 'en_US' }), 'Annual Contract Value')
  t.strictEqual(Strings.get(strings, Strings.ANNUAL_CONTRACT_VALUE, { count: 0, locale: 'en_US' }), 'Annual Contract Value')
  t.strictEqual(Strings.get(Strings.ANNUAL_CONTRACT_VALUE, strings, { count: 0, locale: 'en-US' }), 'Annual Contract Value')
  t.strictEqual(Strings.get(strings, Strings.ANNUAL_CONTRACT_VALUE, { count: 2, locale: 'en_US' }), 'Annual Contract Value')
  t.strictEqual(Strings.get(Strings.ANNUAL_CONTRACT_VALUE, strings, { count: 2, locale: 'en-US' }), 'Annual Contract Value')
  t.strictEqual(Strings.get(strings, invalidKey, { count: 1, locale: 'en-US' }), '')
  t.strictEqual(Strings.get(invalidKey, strings, { count: 1, locale: 'en_US' }), '')
  t.strictEqual(Strings.get(strings, invalidKey, { count: 0, locale: 'en_US' }), '')
  t.strictEqual(Strings.get(invalidKey, strings, { count: 0, locale: 'en-US' }), '')
  t.strictEqual(Strings.get(strings, invalidKey, { count: 2, locale: 'en_US' }), '')
  t.strictEqual(Strings.get(invalidKey, strings, { count: 2, locale: 'en-US' }), '')

  // 3rd arg opts object with uc boolean and abbrev boolean
  t.strictEqual(Strings.get(strings, Strings.GROSS_MARGIN, { uc: true, abbrev: true }), 'P')
  t.strictEqual(Strings.get(Strings.GROSS_MARGIN, strings, { uc: true, abbrev: true }), 'P')
  t.strictEqual(Strings.get(strings, Strings.ANNUAL_CONTRACT_VALUE, { uc: true, abbrev: true }), 'ACV')
  t.strictEqual(Strings.get(Strings.ANNUAL_CONTRACT_VALUE, strings, { uc: true, abbrev: true }), 'ACV')
  t.strictEqual(Strings.get(strings, invalidKey, { uc: true, abbrev: true }), '')
  t.strictEqual(Strings.get(invalidKey, strings, { uc: true, abbrev: true }), '')

  // strings object supports wrapper
  const wrapper = {
    locale: 'en_US',
    strings
  }
  t.strictEqual(Strings.get(wrapper, Strings.GROSS_MARGIN), 'Profit')
  t.strictEqual(Strings.get(Strings.GROSS_MARGIN, wrapper), 'Profit')

  t.end()
})

tap.test('static getSingular', t => {
  t.strictEqual(Strings.getSingular(), '')
  t.strictEqual(Strings.getSingular(null), '')
  t.strictEqual(Strings.getSingular(''), '')
  t.strictEqual(Strings.getSingular(Strings.GROSS_MARGIN), 'Gross Margin')
  t.strictEqual(Strings.getSingular(Strings.UNIT), 'Unit')

  t.strictEqual(Strings.getSingular(strings, Strings.GROSS_MARGIN), 'Profit')
  t.strictEqual(Strings.getSingular(Strings.GROSS_MARGIN, strings), 'Profit')
  t.strictEqual(Strings.getSingular(strings, Strings.PLAN), 'Program')
  t.strictEqual(Strings.getSingular(Strings.PLAN, strings), 'Program')
  t.strictEqual(Strings.getSingular(strings, Strings.QUOTA), 'Plan')
  t.strictEqual(Strings.getSingular(Strings.QUOTA, strings), 'Plan')
  t.strictEqual(Strings.getSingular(strings, Strings.ANNUAL_CONTRACT_VALUE), 'Annual Contract Value')
  t.strictEqual(Strings.getSingular(Strings.ANNUAL_CONTRACT_VALUE, strings), 'Annual Contract Value')
  t.strictEqual(Strings.getSingular(strings, invalidKey), '')
  t.strictEqual(Strings.getSingular(invalidKey, strings), '')

  t.strictEqual(Strings.getSingular(strings, Strings.GROSS_MARGIN, { lc: true }), 'profit')
  t.strictEqual(Strings.getSingular(Strings.GROSS_MARGIN, strings, { lc: true }), 'profit')
  t.strictEqual(Strings.getSingular(strings, Strings.PLAN, { lc: true }), 'program')
  t.strictEqual(Strings.getSingular(Strings.PLAN, strings, { lc: true }), 'program')
  t.strictEqual(Strings.getSingular(strings, Strings.ANNUAL_CONTRACT_VALUE, { lc: true, abbrev: true }), 'acv')
  t.strictEqual(Strings.getSingular(Strings.ANNUAL_CONTRACT_VALUE, strings, { lc: true, abbrev: true }), 'acv')

  t.end()
})

tap.test('static getPlural', t => {
  t.strictEqual(Strings.getPlural(), '')
  t.strictEqual(Strings.getPlural(null), '')
  t.strictEqual(Strings.getPlural(''), '')
  t.strictEqual(Strings.getPlural(Strings.GROSS_MARGIN), 'Gross Margin')
  t.strictEqual(Strings.getPlural(Strings.UNIT), 'Units')

  t.strictEqual(Strings.getPlural(strings, Strings.GROSS_MARGIN), 'Profit')
  t.strictEqual(Strings.getPlural(Strings.GROSS_MARGIN, strings), 'Profit')
  t.strictEqual(Strings.getPlural(strings, Strings.PLAN), 'Programs')
  t.strictEqual(Strings.getPlural(Strings.PLAN, strings), 'Programs')
  t.strictEqual(Strings.getPlural(strings, Strings.QUOTA), 'Plans')
  t.strictEqual(Strings.getPlural(Strings.QUOTA, strings), 'Plans')
  t.strictEqual(Strings.getPlural(strings, Strings.ANNUAL_CONTRACT_VALUE), 'Annual Contract Value')
  t.strictEqual(Strings.getPlural(Strings.ANNUAL_CONTRACT_VALUE, strings), 'Annual Contract Value')
  t.strictEqual(Strings.getPlural(strings, invalidKey), '')
  t.strictEqual(Strings.getPlural(invalidKey, strings), '')

  t.strictEqual(Strings.getPlural(strings, Strings.GROSS_MARGIN, { lc: true }), 'profit')
  t.strictEqual(Strings.getPlural(Strings.GROSS_MARGIN, strings, { lc: true }), 'profit')
  t.strictEqual(Strings.getPlural(strings, Strings.PLAN, { lc: true }), 'programs')
  t.strictEqual(Strings.getPlural(Strings.PLAN, strings, { lc: true }), 'programs')
  t.strictEqual(Strings.getPlural(strings, Strings.ANNUAL_CONTRACT_VALUE, { lc: true, abbrev: true }), 'acv')
  t.strictEqual(Strings.getPlural(Strings.ANNUAL_CONTRACT_VALUE, strings, { lc: true, abbrev: true }), 'acv')

  t.end()
})

tap.test('instance get', t => {
  const d = Strings.wrap()
  const s = Strings.wrap(strings)

  t.strictEqual(d.get(), '')
  t.strictEqual(s.get(), '')
  t.strictEqual(d.get(null), '')
  t.strictEqual(s.get(null), '')
  t.strictEqual(d.get(''), '')
  t.strictEqual(s.get(''), '')

  // 1st arg string as key
  t.strictEqual(d.get(Strings.GROSS_MARGIN), 'Gross Margin')
  t.strictEqual(s.get(Strings.GROSS_MARGIN), 'Profit')
  t.strictEqual(d.get(Strings.ANNUAL_CONTRACT_VALUE), 'Annual Contract Value')
  t.strictEqual(s.get(Strings.ANNUAL_CONTRACT_VALUE), 'Annual Contract Value')
  t.strictEqual(d.get(invalidKey), '')
  t.strictEqual(s.get(invalidKey), '')

  // 2nd arg plural boolean
  t.strictEqual(d.get(Strings.GROSS_MARGIN, false), 'Gross Margin')
  t.strictEqual(s.get(Strings.GROSS_MARGIN, false), 'Profit')
  t.strictEqual(d.get(Strings.GROSS_MARGIN, true), 'Gross Margin')
  t.strictEqual(s.get(Strings.GROSS_MARGIN, true), 'Profit')
  t.strictEqual(d.get(Strings.PLAN, false), 'Plan')
  t.strictEqual(s.get(Strings.PLAN, false), 'Program')
  t.strictEqual(d.get(Strings.PLAN, true), 'Plans')
  t.strictEqual(s.get(Strings.PLAN, true), 'Programs')
  t.strictEqual(d.get(Strings.QUOTA, false), 'Quota')
  t.strictEqual(s.get(Strings.QUOTA, false), 'Plan')
  t.strictEqual(d.get(Strings.QUOTA, true), 'Quotas')
  t.strictEqual(s.get(Strings.QUOTA, true), 'Plans')
  t.strictEqual(d.get(Strings.ANNUAL_CONTRACT_VALUE, false), 'Annual Contract Value')
  t.strictEqual(s.get(Strings.ANNUAL_CONTRACT_VALUE, false), 'Annual Contract Value')
  t.strictEqual(d.get(Strings.ANNUAL_CONTRACT_VALUE, true), 'Annual Contract Value')
  t.strictEqual(s.get(Strings.ANNUAL_CONTRACT_VALUE, true), 'Annual Contract Value')
  t.strictEqual(d.get(invalidKey, false), '')
  t.strictEqual(s.get(invalidKey, false), '')
  t.strictEqual(d.get(invalidKey, true), '')
  t.strictEqual(s.get(invalidKey, true), '')

  // 2nd arg count number
  t.strictEqual(d.get(Strings.GROSS_MARGIN, 1), 'Gross Margin')
  t.strictEqual(s.get(Strings.GROSS_MARGIN, 1), 'Profit')
  t.strictEqual(d.get(Strings.GROSS_MARGIN, 0), 'Gross Margin')
  t.strictEqual(s.get(Strings.GROSS_MARGIN, 0), 'Profit')
  t.strictEqual(d.get(Strings.GROSS_MARGIN, 2), 'Gross Margin')
  t.strictEqual(s.get(Strings.GROSS_MARGIN, 2), 'Profit')
  t.strictEqual(d.get(Strings.PLAN, 1), 'Plan')
  t.strictEqual(s.get(Strings.PLAN, 1), 'Program')
  t.strictEqual(d.get(Strings.PLAN, 0), 'Plans')
  t.strictEqual(s.get(Strings.PLAN, 0), 'Programs')
  t.strictEqual(d.get(Strings.PLAN, 2), 'Plans')
  t.strictEqual(s.get(Strings.PLAN, 2), 'Programs')
  t.strictEqual(d.get(Strings.QUOTA, 1), 'Quota')
  t.strictEqual(s.get(Strings.QUOTA, 1), 'Plan')
  t.strictEqual(d.get(Strings.QUOTA, 0), 'Quotas')
  t.strictEqual(s.get(Strings.QUOTA, 0), 'Plans')
  t.strictEqual(d.get(Strings.QUOTA, 2), 'Quotas')
  t.strictEqual(s.get(Strings.QUOTA, 2), 'Plans')
  t.strictEqual(d.get(Strings.ANNUAL_CONTRACT_VALUE, 1), 'Annual Contract Value')
  t.strictEqual(s.get(Strings.ANNUAL_CONTRACT_VALUE, 1), 'Annual Contract Value')
  t.strictEqual(d.get(Strings.ANNUAL_CONTRACT_VALUE, 0), 'Annual Contract Value')
  t.strictEqual(s.get(Strings.ANNUAL_CONTRACT_VALUE, 0), 'Annual Contract Value')
  t.strictEqual(d.get(Strings.ANNUAL_CONTRACT_VALUE, 2), 'Annual Contract Value')
  t.strictEqual(s.get(Strings.ANNUAL_CONTRACT_VALUE, 2), 'Annual Contract Value')
  t.strictEqual(d.get(invalidKey, 1), '')
  t.strictEqual(s.get(invalidKey, 1), '')
  t.strictEqual(d.get(invalidKey, 0), '')
  t.strictEqual(s.get(invalidKey, 0), '')
  t.strictEqual(d.get(invalidKey, 2), '')
  t.strictEqual(s.get(invalidKey, 2), '')

  // 2nd arg opts object with plural boolean and uc boolean
  t.strictEqual(d.get(Strings.GROSS_MARGIN, { plural: false, uc: true }), 'GROSS MARGIN')
  t.strictEqual(s.get(Strings.GROSS_MARGIN, { plural: false, uc: true }), 'PROFIT')
  t.strictEqual(d.get(Strings.GROSS_MARGIN, { plural: true, uc: true }), 'GROSS MARGIN')
  t.strictEqual(s.get(Strings.GROSS_MARGIN, { plural: true, uc: true }), 'PROFIT')
  t.strictEqual(d.get(Strings.PLAN, { plural: false, uc: true }), 'PLAN')
  t.strictEqual(s.get(Strings.PLAN, { plural: false, uc: true }), 'PROGRAM')
  t.strictEqual(d.get(Strings.PLAN, { plural: true, uc: true }), 'PLANS')
  t.strictEqual(s.get(Strings.PLAN, { plural: true, uc: true }), 'PROGRAMS')
  t.strictEqual(d.get(Strings.QUOTA, { plural: false, uc: true }), 'QUOTA')
  t.strictEqual(s.get(Strings.QUOTA, { plural: false, uc: true }), 'PLAN')
  t.strictEqual(d.get(Strings.QUOTA, { plural: true, uc: true }), 'QUOTAS')
  t.strictEqual(s.get(Strings.QUOTA, { plural: true, uc: true }), 'PLANS')
  t.strictEqual(d.get(Strings.ANNUAL_CONTRACT_VALUE, { plural: false, uc: true }), 'ANNUAL CONTRACT VALUE')
  t.strictEqual(s.get(Strings.ANNUAL_CONTRACT_VALUE, { plural: false, uc: true }), 'ANNUAL CONTRACT VALUE')
  t.strictEqual(d.get(Strings.ANNUAL_CONTRACT_VALUE, { plural: true, uc: true }), 'ANNUAL CONTRACT VALUE')
  t.strictEqual(s.get(Strings.ANNUAL_CONTRACT_VALUE, { plural: true, uc: true }), 'ANNUAL CONTRACT VALUE')
  t.strictEqual(d.get(invalidKey, { plural: false, uc: true }), '')
  t.strictEqual(s.get(invalidKey, { plural: false, uc: true }), '')
  t.strictEqual(d.get(invalidKey, { plural: true, uc: true }), '')
  t.strictEqual(s.get(invalidKey, { plural: true, uc: true }), '')

  // 2nd arg opts object with count number and lc boolean
  t.strictEqual(d.get(Strings.GROSS_MARGIN, { count: 1, lc: true }), 'gross margin')
  t.strictEqual(s.get(Strings.GROSS_MARGIN, { count: 1, lc: true }), 'profit')
  t.strictEqual(d.get(Strings.GROSS_MARGIN, { count: 0, lc: true }), 'gross margin')
  t.strictEqual(s.get(Strings.GROSS_MARGIN, { count: 0, lc: true }), 'profit')
  t.strictEqual(d.get(Strings.GROSS_MARGIN, { count: 2, lc: true }), 'gross margin')
  t.strictEqual(s.get(Strings.GROSS_MARGIN, { count: 2, lc: true }), 'profit')
  t.strictEqual(d.get(Strings.PLAN, { count: 1, lc: true }), 'plan')
  t.strictEqual(s.get(Strings.PLAN, { count: 1, lc: true }), 'program')
  t.strictEqual(d.get(Strings.PLAN, { count: 0, lc: true }), 'plans')
  t.strictEqual(s.get(Strings.PLAN, { count: 0, lc: true }), 'programs')
  t.strictEqual(d.get(Strings.PLAN, { count: 2, lc: true }), 'plans')
  t.strictEqual(s.get(Strings.PLAN, { count: 2, lc: true }), 'programs')
  t.strictEqual(d.get(Strings.QUOTA, { count: 1, lc: true }), 'quota')
  t.strictEqual(s.get(Strings.QUOTA, { count: 1, lc: true }), 'plan')
  t.strictEqual(d.get(Strings.QUOTA, { count: 0, lc: true }), 'quotas')
  t.strictEqual(s.get(Strings.QUOTA, { count: 0, lc: true }), 'plans')
  t.strictEqual(d.get(Strings.QUOTA, { count: 2, lc: true }), 'quotas')
  t.strictEqual(s.get(Strings.QUOTA, { count: 2, lc: true }), 'plans')
  t.strictEqual(d.get(Strings.ANNUAL_CONTRACT_VALUE, { count: 1, lc: true }), 'annual contract value')
  t.strictEqual(s.get(Strings.ANNUAL_CONTRACT_VALUE, { count: 1, lc: true }), 'annual contract value')
  t.strictEqual(d.get(Strings.ANNUAL_CONTRACT_VALUE, { count: 0, lc: true }), 'annual contract value')
  t.strictEqual(s.get(Strings.ANNUAL_CONTRACT_VALUE, { count: 0, lc: true }), 'annual contract value')
  t.strictEqual(d.get(Strings.ANNUAL_CONTRACT_VALUE, { count: 2, lc: true }), 'annual contract value')
  t.strictEqual(s.get(Strings.ANNUAL_CONTRACT_VALUE, { count: 2, lc: true }), 'annual contract value')
  t.strictEqual(d.get(invalidKey, { count: 1, lc: true }), '')
  t.strictEqual(s.get(invalidKey, { count: 1, lc: true }), '')
  t.strictEqual(d.get(invalidKey, { count: 0, lc: true }), '')
  t.strictEqual(s.get(invalidKey, { count: 0, lc: true }), '')
  t.strictEqual(d.get(invalidKey, { count: 2, lc: true }), '')
  t.strictEqual(s.get(invalidKey, { count: 2, lc: true }), '')

  // 2nd arg opts object with abbrev boolean
  t.strictEqual(d.get(Strings.GROSS_MARGIN, { abbrev: true }), 'GM')
  t.strictEqual(s.get(Strings.GROSS_MARGIN, { abbrev: true }), 'P')
  t.strictEqual(d.get(Strings.ANNUAL_CONTRACT_VALUE, { abbrev: true }), 'ACV')
  t.strictEqual(s.get(Strings.ANNUAL_CONTRACT_VALUE, { abbrev: true }), 'ACV')

  t.end()
})

tap.test('instance getSingular', t => {
  const d = Strings.wrap()
  const s = Strings.wrap(strings)

  t.strictEqual(d.getSingular(), '')
  t.strictEqual(s.getSingular(), '')
  t.strictEqual(d.getSingular(null), '')
  t.strictEqual(s.getSingular(null), '')
  t.strictEqual(d.getSingular(''), '')
  t.strictEqual(s.getSingular(''), '')

  t.strictEqual(d.getSingular(Strings.GROSS_MARGIN), 'Gross Margin')
  t.strictEqual(s.getSingular(Strings.GROSS_MARGIN), 'Profit')
  t.strictEqual(d.getSingular(Strings.PLAN), 'Plan')
  t.strictEqual(s.getSingular(Strings.PLAN), 'Program')
  t.strictEqual(d.getSingular(Strings.QUOTA), 'Quota')
  t.strictEqual(s.getSingular(Strings.QUOTA), 'Plan')
  t.strictEqual(d.getSingular(Strings.ANNUAL_CONTRACT_VALUE), 'Annual Contract Value')
  t.strictEqual(s.getSingular(Strings.ANNUAL_CONTRACT_VALUE), 'Annual Contract Value')
  t.strictEqual(d.getSingular(invalidKey), '')
  t.strictEqual(s.getSingular(invalidKey), '')

  t.strictEqual(d.getSingular(Strings.GROSS_MARGIN, { uc: true }), 'GROSS MARGIN')
  t.strictEqual(s.getSingular(Strings.GROSS_MARGIN, { uc: true }), 'PROFIT')
  t.strictEqual(d.getSingular(Strings.GROSS_MARGIN, { uc: true, abbrev: true }), 'GM')
  t.strictEqual(s.getSingular(Strings.GROSS_MARGIN, { uc: true, abbrev: true }), 'P')

  t.end()
})

tap.test('instance getPlural', t => {
  const d = Strings.wrap()
  const s = Strings.wrap(strings)

  t.strictEqual(d.getPlural(), '')
  t.strictEqual(s.getPlural(), '')
  t.strictEqual(d.getPlural(null), '')
  t.strictEqual(s.getPlural(null), '')
  t.strictEqual(d.getPlural(''), '')
  t.strictEqual(s.getPlural(''), '')

  t.strictEqual(d.getPlural(Strings.GROSS_MARGIN), 'Gross Margin')
  t.strictEqual(s.getPlural(Strings.GROSS_MARGIN), 'Profit')
  t.strictEqual(d.getPlural(Strings.PLAN), 'Plans')
  t.strictEqual(s.getPlural(Strings.PLAN), 'Programs')
  t.strictEqual(d.getPlural(Strings.QUOTA), 'Quotas')
  t.strictEqual(s.getPlural(Strings.QUOTA), 'Plans')
  t.strictEqual(d.getPlural(Strings.ANNUAL_CONTRACT_VALUE), 'Annual Contract Value')
  t.strictEqual(s.getPlural(Strings.ANNUAL_CONTRACT_VALUE), 'Annual Contract Value')
  t.strictEqual(d.getPlural(invalidKey), '')
  t.strictEqual(s.getPlural(invalidKey), '')

  t.strictEqual(d.getPlural(Strings.PLAN, { lc: true }), 'plans')
  t.strictEqual(s.getPlural(Strings.PLAN, { lc: true }), 'programs')

  t.end()
})

tap.test('extra cases', t => {
  const w = Strings.wrap({
    locale: 'en-US',
    strings: {
      [Strings.PRODUCT]: {
        singular: 'Product'
      },
      [Strings.CATEGORY]: {
        one: 'Category'
      },
      [Strings.UNIT]: {}
    }
  })
  t.strictEqual(w.getPlural(Strings.PRODUCT), 'Products')
  t.strictEqual(w.getPlural(Strings.CATEGORY), 'Categories')
  t.strictEqual(w.getPlural(Strings.UNIT), '')
  t.end()
})

tap.test('defaults', t => {
  const d = Strings.wrap()

  // kpis
  t.strictEqual(d.getSingular(Strings.GROSS_MARGIN), 'Gross Margin')
  t.strictEqual(d.getPlural(Strings.GROSS_MARGIN), 'Gross Margin')
  t.strictEqual(d.getSingular(Strings.GROSS_MARGIN, { abbrev: true }), 'GM')
  t.strictEqual(d.getSingular(Strings.EXTENDED_AMOUNT), 'Extended Amount')
  t.strictEqual(d.getPlural(Strings.EXTENDED_AMOUNT), 'Extended Amount')
  t.strictEqual(d.getSingular(Strings.EXTENDED_AMOUNT, { abbrev: true }), 'EA')
  t.strictEqual(d.getSingular(Strings.ANNUAL_CONTRACT_VALUE), 'Annual Contract Value')
  t.strictEqual(d.getPlural(Strings.ANNUAL_CONTRACT_VALUE), 'Annual Contract Value')
  t.strictEqual(d.getSingular(Strings.ANNUAL_CONTRACT_VALUE, { abbrev: true }), 'ACV')
  t.strictEqual(d.getSingular(Strings.VOLUME), 'Volume')
  t.strictEqual(d.getPlural(Strings.VOLUME), 'Volume')
  t.strictEqual(d.getSingular(Strings.VOLUME, { abbrev: true }), 'V')
  t.strictEqual(d.getSingular(Strings.UNIT), 'Unit')
  t.strictEqual(d.getPlural(Strings.UNIT), 'Units')
  t.strictEqual(d.getSingular(Strings.UNIT, { abbrev: true }), 'U')

  // others
  t.strictEqual(d.getSingular(Strings.PRODUCT), 'Product')
  t.strictEqual(d.getPlural(Strings.PRODUCT), 'Products')
  t.strictEqual(d.getSingular(Strings.CATEGORY), 'Category')
  t.strictEqual(d.getPlural(Strings.CATEGORY), 'Categories')
  t.strictEqual(d.getSingular(Strings.PLAN), 'Plan')
  t.strictEqual(d.getPlural(Strings.PLAN), 'Plans')
  t.strictEqual(d.getSingular(Strings.QUOTA), 'Quota')
  t.strictEqual(d.getPlural(Strings.QUOTA), 'Quotas')
  t.strictEqual(d.getSingular(Strings.RULE), 'Rule')
  t.strictEqual(d.getPlural(Strings.RULE), 'Rules')
  t.strictEqual(d.getSingular(Strings.SALE), 'Sale')
  t.strictEqual(d.getPlural(Strings.SALE), 'Sales')
  t.strictEqual(d.getSingular(Strings.COMPENSATION), 'Compensation')
  t.strictEqual(d.getPlural(Strings.COMPENSATION), 'Compensation')
  t.strictEqual(d.getSingular(Strings.REPORT), 'Report')
  t.strictEqual(d.getPlural(Strings.REPORT), 'Reports')
  t.strictEqual(d.getSingular(Strings.DRAFT), 'Draft')
  t.strictEqual(d.getPlural(Strings.DRAFT), 'Draft')
  t.strictEqual(d.getSingular(Strings.PUBLISHED), 'Published')
  t.strictEqual(d.getPlural(Strings.PUBLISHED), 'Published')
  t.strictEqual(d.getSingular(Strings.CLOSED), 'Closed')
  t.strictEqual(d.getPlural(Strings.CLOSED), 'Closed')
  t.strictEqual(d.getSingular(Strings.DISPUTE), 'Dispute')
  t.strictEqual(d.getPlural(Strings.DISPUTE), 'Disputes')
  t.strictEqual(d.getSingular(Strings.MEMBER), 'Member')
  t.strictEqual(d.getPlural(Strings.MEMBER), 'Members')
  t.strictEqual(d.getSingular(Strings.REP), 'Rep')
  t.strictEqual(d.getPlural(Strings.REP), 'Reps')
  t.strictEqual(d.getSingular(Strings.TEAM), 'Team')
  t.strictEqual(d.getPlural(Strings.TEAM), 'Teams')

  t.end()
})
